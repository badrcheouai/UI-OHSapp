import axios from 'axios';

export const api = axios.create({
    baseURL: 'http://localhost:8081',
    params: {
        v: Date.now(), // Cache busting
    },
    // Increase timeout for medical visit operations
    timeout: 30000, // 30 seconds instead of 10
});

api.interceptors.request.use(cfg => {
    // Get token from localStorage (same as AuthContext)
    const stored = localStorage.getItem("oshapp_tokens");
    console.log('üîç API Interceptor - stored tokens:', stored ? 'found' : 'not found');
    
    if (stored) {
        try {
            const parsed = JSON.parse(stored);
            console.log('üîç API Interceptor - parsed tokens:', parsed);
            
            if (parsed.access_token) {
                cfg.headers.Authorization = `Bearer ${parsed.access_token}`;
                console.log('üîç API Interceptor - Authorization header set');
            }
        } catch (error) {
            console.error('‚ùå API Interceptor - Error parsing tokens:', error);
        }
    }
    
    console.log('üîç API Interceptor - Final config headers:', cfg.headers);
    return cfg;
});

api.interceptors.response.use(
    response => {
        console.log('‚úÖ API Response Success:', response.status, response.config.url);
        return response;
    },
    error => {
        console.log('‚ùå API Response Error:', error.response?.status, error.response?.statusText, error.config?.url);
        
        // Check for timeout or connection errors
        if (error.code === 'ECONNABORTED' || error.message === 'timeout of 10000ms exceeded') {
            console.log('üåê Backend Connection Timeout - Server may not be running on port 8081');
            // Don't throw the error, let the component handle it
            return Promise.reject(error);
        }
        
        // Check for network errors
        if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
            console.log('üåê Network error detected - backend may not be running');
            return Promise.reject(error);
        }
        
        // Check for specific CORS configuration error
        if (error.response?.status === 500) {
            const errorMessage = error.response?.data?.message || '';
            if (errorMessage.includes('allowCredentials') && errorMessage.includes('allowedOrigins')) {
                console.log('üåê Backend CORS Configuration Error - Using fallback data');
                // Return a mock response to prevent the error from propagating
                return Promise.resolve({
                    data: [],
                    status: 200,
                    statusText: 'OK',
                    headers: {},
                    config: error.config,
                    request: error.request
                });
            }
        }
        
        return Promise.reject(error);
    }
);

export async function apiFetch(url: string, { method = "GET", body, token }: { method?: string; body?: any; token?: string }) {
  const headers: Record<string, string> = {
    "Content-Type": "application/json",
    ...(token ? { Authorization: `Bearer ${token}` } : {}),
  };
  const res = await fetch(url, {
    method,
    headers,
    ...(body ? { body: JSON.stringify(body) } : {}),
  });
  if (res.status === 401) {
    // Handle token expiration (e.g., redirect to login)
    throw new Error("Unauthorized");
  }
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

// Medical Visit Request Types
export interface MedicalVisitRequest {
  id: number;
  employeeId: number;
  employeeName: string;
  employeeDepartment: string;
  employeeEmail?: string;
  employeeGender?: string;
  employeeCompany?: string;
  motif: string;
  dateSouhaitee: string;
  heureSouhaitee: string;
  status: 'PENDING' | 'PROPOSED' | 'CONFIRMED' | 'CANCELLED' | 'REJECTED';
  proposedDate?: string;
  proposedTime?: string;
  confirmedDate?: string;
  confirmedTime?: string;
  notes?: string;
  modality?: 'PRESENTIEL' | 'DISTANCE';
  proposedModality?: 'PRESENTIEL' | 'DISTANCE';
  visitType?: 'EMBAUCHE' | 'PERIODIQUE' | 'SURVEILLANCE_PARTICULIERE' | 'REPRISE' | 'APPEL_MEDECIN' | 'SPONTANEE';
  dueDate?: string;
  autoGenerated?: boolean;
  repriseCategory?: 'AT_MP' | 'ACCIDENT_MALADIE_HORS_AT_MP' | 'ABSENCES_REPETEES' | 'ACCOUCHEMENT';
  repriseDetails?: string;
  hasMedicalCertificates?: boolean;
  assignedNurseId?: number;
  assignedNurseName?: string;
  assignedDoctorId?: number;
  assignedDoctorName?: string;
  previousProposals?: MedicalVisitProposal[];
  createdAt: string;
  updatedAt: string;
}

export interface MedicalVisitProposal {
  id: number;
  proposedDate: string;
  proposedTime: string;
  proposedBy: string;
  reason?: string;
  status: 'PENDING' | 'ACCEPTED' | 'REJECTED';
  proposedAt: string;
}

export interface CreateMedicalVisitRequestData {
  motif: string;
  dateSouhaitee: string;
  heureSouhaitee: string;
  notes?: string;
  visitType?: 'EMBAUCHE' | 'PERIODIQUE' | 'SURVEILLANCE_PARTICULIERE' | 'REPRISE' | 'APPEL_MEDECIN' | 'SPONTANEE';
  dueDate?: string;
  repriseCategory?: 'AT_MP' | 'ACCIDENT_MALADIE_HORS_AT_MP' | 'ABSENCES_REPETEES' | 'ACCOUCHEMENT';
  repriseDetails?: string;
}

export interface ProposeSlotData {
  proposedDate: string;
  proposedTime: string;
  reason?: string;
  proposedBy: string;
  modality?: 'PRESENTIEL' | 'DISTANCE';
}

export interface ConfirmRequestData {
  confirmedDate: string;
  confirmedTime: string;
  notes?: string;
  modality?: 'PRESENTIEL' | 'DISTANCE';
}

// Medical Visit Request API Functions
export const medicalVisitAPI = {
  // Create a new medical visit request
  createRequest: (data: CreateMedicalVisitRequestData, employeeId: number) => 
    api.post<MedicalVisitRequest>('/api/v1/medical-visits', data, { params: { employeeId } }),

  // Get a specific request by ID
  getRequestById: (requestId: number) => 
    api.get<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}`),

  // Get all requests for a specific employee
  getEmployeeRequests: (employeeId: number) => 
    api.get<MedicalVisitRequest[]>(`/api/v1/medical-visits/employee/${employeeId}`),

  // Check for active requests for an employee
  checkActiveRequests: (employeeId: number) => 
    api.get<{hasActiveRequests: boolean, activeRequests: MedicalVisitRequest[]}>(`/api/v1/medical-visits/employee/${employeeId}/active`),

  // Reset all requests for an employee (development/testing)
  resetEmployeeRequests: (employeeId: number) => 
    api.delete<{message: string}>(`/api/v1/medical-visits/employee/${employeeId}/reset`),

  // Get all requests (no status filter)
  getAllRequests: () => 
    api.get<MedicalVisitRequest[]>('/api/v1/medical-visits'),

  // Get all pending requests
  getPendingRequests: () => 
    api.get<MedicalVisitRequest[]>('/api/v1/medical-visits/pending'),

  // Get requests by status
  getRequestsByStatus: (status: string) => 
    api.get<MedicalVisitRequest[]>(`/api/v1/medical-visits/status/${status}`),

  // Propose a new slot for a request
  proposeSlot: (requestId: number, data: ProposeSlotData) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/propose`, data),

  // Confirm a request
  confirmRequest: (requestId: number, data: ConfirmRequestData) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/confirm`, data),

  // Accept a proposal
  acceptProposal: (requestId: number) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/accept`),

  // Reject a proposal
  rejectProposal: (requestId: number, reason: string) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/reject`, { reason }),

  // Cancel a request
  cancelRequest: (requestId: number, reason: string) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/cancel`, { reason }),

  // Assign medical staff to a request
  assignMedicalStaff: (requestId: number, nurseId?: number, doctorId?: number) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/assign`, { nurseId, doctorId }),

  // Get requests for medical staff
  getRequestsByMedicalStaff: (nurseId?: number, doctorId?: number) => 
    api.get<MedicalVisitRequest[]>('/api/v1/medical-visits/medical-staff', { params: { nurseId, doctorId } }),

  // Get request statistics
  getRequestCounts: () => 
    api.get<Record<string, number>>('/api/v1/medical-visits/stats/count'),
};

// Admin/Employees helpers
export const adminAPI = {
  updateEmployeeManagers: (employeeId: number, payload: { manager1Id?: number | null; manager2Id?: number | null }) =>
    api.put(`/api/v1/admin/employees/${employeeId}/managers`, payload),
  getEmployees: () => api.get(`/api/v1/admin/employees`),
  getEmployeeById: (id: number) => api.get(`/api/v1/admin/employees/${id}`),
  createEmployee: (payload: Record<string, any>) => api.post(`/api/v1/admin/employees`, payload),
  updateEmployee: (id: number, payload: Record<string, any>) => api.put(`/api/v1/admin/employees/${id}`, payload),
  deleteEmployee: (id: number) => api.delete(`/api/v1/admin/employees/${id}`),
};
