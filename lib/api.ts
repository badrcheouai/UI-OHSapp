import axios from 'axios';

export const api = axios.create({
    baseURL: 'http://localhost:8081',
    params: {
        v: Date.now(), // Cache busting
    },
    // Add timeout configuration
    timeout: 10000,
});

api.interceptors.request.use(cfg => {
    // Get token from localStorage (same as AuthContext)
    const stored = localStorage.getItem("oshapp_tokens");
    console.log('üîç API Interceptor - stored tokens:', stored ? 'found' : 'not found');

    // Skip Authorization header for public endpoints
    const path = cfg.url || '';
    const isPublic = path.startsWith('/api/notifications') || path.startsWith('/api/v1/pharmacy') || path.startsWith('/api/v1/pharmacy-orders');

    if (!isPublic && stored) {
        try {
            const parsed = JSON.parse(stored);
            console.log('üîç API Interceptor - parsed tokens:', parsed);
            
            if (parsed.access_token) {
                cfg.headers.Authorization = `Bearer ${parsed.access_token}`;
                console.log('üîç API Interceptor - Authorization header set');
            }
        } catch (error) {
            console.error('‚ùå API Interceptor - Error parsing tokens:', error);
        }
    }
    
    console.log('üîç API Interceptor - Final config headers:', cfg.headers);
    return cfg;
});

api.interceptors.response.use(
    response => {
        console.log('‚úÖ API Response Success:', response.status, response.config.url);
        return response;
    },
    error => {
        console.log('‚ùå API Response Error:', error.response?.status, error.response?.statusText, error.config?.url);
        
        // Check for timeout or connection errors
        if (error.code === 'ECONNABORTED' || error.message === 'timeout of 10000ms exceeded') {
            console.log('üåê Backend Connection Timeout - Server may not be running on port 8081');
            // Don't throw the error, let the component handle it
            return Promise.reject(error);
        }
        
        // Check for network errors
        if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
            console.log('üåê Network error detected - backend may not be running');
            return Promise.reject(error);
        }
        
        // Check for specific CORS configuration error
        if (error.response?.status === 500) {
            const errorMessage = error.response?.data?.message || '';
            if (errorMessage.includes('allowCredentials') && errorMessage.includes('allowedOrigins')) {
                console.log('üåê Backend CORS Configuration Error - Using fallback data');
                // Return a mock response to prevent the error from propagating
                return Promise.resolve({
                    data: [],
                    status: 200,
                    statusText: 'OK',
                    headers: {},
                    config: error.config,
                    request: error.request
                });
            }
        }
        
        return Promise.reject(error);
    }
);

export async function apiFetch(url: string, { method = "GET", body, token }: { method?: string; body?: any; token?: string }) {
  const headers: Record<string, string> = {
    "Content-Type": "application/json",
    ...(token ? { Authorization: `Bearer ${token}` } : {}),
  };
  const res = await fetch(url, {
    method,
    headers,
    ...(body ? { body: JSON.stringify(body) } : {}),
  });
  if (res.status === 401) {
    // Handle token expiration (e.g., redirect to login)
    throw new Error("Unauthorized");
  }
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

// Medical Visit Request Types
export interface MedicalVisitRequest {
  id: number;
  employeeId: number;
  employeeName: string;
  employeeDepartment: string;
  motif: string;
  dateSouhaitee: string;
  heureSouhaitee: string;
  status: 'PENDING' | 'PROPOSED' | 'CONFIRMED' | 'CANCELLED' | 'REJECTED';
  proposedDate?: string;
  proposedTime?: string;
  confirmedDate?: string;
  confirmedTime?: string;
  notes?: string;
  modality?: 'PRESENTIEL' | 'DISTANCE';
  proposedModality?: 'PRESENTIEL' | 'DISTANCE';
  visitType?: 'EMBAUCHE' | 'PERIODIQUE' | 'SURVEILLANCE_PARTICULIERE' | 'REPRISE' | 'APPEL_MEDECIN' | 'SPONTANEE';
  dueDate?: string;
  autoGenerated?: boolean;
  repriseCategory?: 'AT_MP' | 'ACCIDENT_MALADIE_HORS_AT_MP' | 'ABSENCES_REPETEES';
  repriseDetails?: string;
  assignedNurseId?: number;
  assignedNurseName?: string;
  assignedDoctorId?: number;
  assignedDoctorName?: string;
  previousProposals?: MedicalVisitProposal[];
  createdAt: string;
  updatedAt: string;
}

export interface MedicalVisitProposal {
  id: number;
  proposedDate: string;
  proposedTime: string;
  proposedBy: string;
  reason?: string;
  status: 'PENDING' | 'ACCEPTED' | 'REJECTED';
  proposedAt: string;
}

export interface CreateMedicalVisitRequestData {
  motif: string;
  dateSouhaitee: string;
  heureSouhaitee: string;
  notes?: string;
  visitType?: 'EMBAUCHE' | 'PERIODIQUE' | 'SURVEILLANCE_PARTICULIERE' | 'REPRISE' | 'APPEL_MEDECIN' | 'SPONTANEE';
  dueDate?: string;
  repriseCategory?: 'AT_MP' | 'ACCIDENT_MALADIE_HORS_AT_MP' | 'ABSENCES_REPETEES';
  repriseDetails?: string;
}

export interface ProposeSlotData {
  proposedDate: string;
  proposedTime: string;
  reason?: string;
  proposedBy: string;
  modality?: 'PRESENTIEL' | 'DISTANCE';
}

export interface ConfirmRequestData {
  confirmedDate: string;
  confirmedTime: string;
  notes?: string;
  modality?: 'PRESENTIEL' | 'DISTANCE';
}

// Medical Visit Request API Functions
export const medicalVisitAPI = {
  // Create a new medical visit request
  createRequest: (data: CreateMedicalVisitRequestData, employeeId: number) => 
    api.post<MedicalVisitRequest>('/api/v1/medical-visits', data, { params: { employeeId } }),

  // Get a specific request by ID
  getRequestById: (requestId: number) => 
    api.get<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}`),

  // Get all requests for a specific employee
  getEmployeeRequests: (employeeId: number) => 
    api.get<MedicalVisitRequest[]>(`/api/v1/medical-visits/employee/${employeeId}`),

  // Check for active requests for an employee
  checkActiveRequests: (employeeId: number) => 
    api.get<{hasActiveRequests: boolean, activeRequests: MedicalVisitRequest[]}>(`/api/v1/medical-visits/employee/${employeeId}/active`),

  // Reset all requests for an employee (development/testing)
  resetEmployeeRequests: (employeeId: number) => 
    api.delete<{message: string}>(`/api/v1/medical-visits/employee/${employeeId}/reset`),

  // Get all requests (no status filter)
  getAllRequests: () => 
    api.get<MedicalVisitRequest[]>('/api/v1/medical-visits'),

  // Get all pending requests
  getPendingRequests: () => 
    api.get<MedicalVisitRequest[]>('/api/v1/medical-visits/pending'),

  // Get requests by status
  getRequestsByStatus: (status: string) => 
    api.get<MedicalVisitRequest[]>(`/api/v1/medical-visits/status/${status}`),

  // Propose a new slot for a request
  proposeSlot: (requestId: number, data: ProposeSlotData) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/propose`, data),

  // Confirm a request
  confirmRequest: (requestId: number, data: ConfirmRequestData) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/confirm`, data),

  // Accept a proposal
  acceptProposal: (requestId: number) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/accept`),

  // Reject a proposal
  rejectProposal: (requestId: number, reason: string) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/reject`, { reason }),

  // Cancel a request
  cancelRequest: (requestId: number, reason: string) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/cancel`, { reason }),

  // Assign medical staff to a request
  assignMedicalStaff: (requestId: number, nurseId?: number, doctorId?: number) => 
    api.post<MedicalVisitRequest>(`/api/v1/medical-visits/${requestId}/assign`, { nurseId, doctorId }),

  // Get requests for medical staff
  getRequestsByMedicalStaff: (nurseId?: number, doctorId?: number) => 
    api.get<MedicalVisitRequest[]>('/api/v1/medical-visits/medical-staff', { params: { nurseId, doctorId } }),

  // Get request statistics
  getRequestCounts: () => 
    api.get<Record<string, number>>('/api/v1/medical-visits/stats/count'),
};

// Admin/Employees helpers
export const adminAPI = {
  updateEmployeeManagers: (employeeId: number, payload: { manager1Id?: number | null; manager2Id?: number | null }) =>
    api.put(`/api/v1/admin/employees/${employeeId}/managers`, payload),
  getEmployees: () => api.get(`/api/v1/admin/employees`),
  getEmployeeById: (id: number) => api.get(`/api/v1/admin/employees/${id}`),
  createEmployee: (payload: Record<string, any>) => api.post(`/api/v1/admin/employees`, payload),
  updateEmployee: (id: number, payload: Record<string, any>) => api.put(`/api/v1/admin/employees/${id}`, payload),
  deleteEmployee: (id: number) => api.delete(`/api/v1/admin/employees/${id}`),
};

// Pharmacy types & API
export type MedicationForm = 'INJECTABLE' | 'COMPRIME' | 'SUPPOSITOIRE' | 'TOPIQUE' | 'GOUTTE' | 'SPRAY'

export interface PharmacyItem {
  id: number
  category: 'MEDICAMENT' | 'PARAPHARMACEUTIQUE' | 'MATERIEL_SST'
  name: string
  quantity: number
  form?: MedicationForm
  expirationDate?: string
  purchaseDate?: string
  prescriptionDate?: string
  dispenseByUnit?: boolean
  unitsPerPackage?: number
  unitsRemaining?: number
  repairDate?: string
  calibrationDate?: string
}

export const pharmacyAPI = {
  getAll: () => api.get<PharmacyItem[]>(`/api/v1/pharmacy`),
  getByCategory: (category: PharmacyItem['category']) => api.get<PharmacyItem[]>(`/api/v1/pharmacy/category/${category}`),
  search: (q: string) => api.get<PharmacyItem[]>(`/api/v1/pharmacy/search`, { params: { q } }),
  create: (payload: Omit<PharmacyItem, 'id'>) => api.post<PharmacyItem>(`/api/v1/pharmacy`, payload),
  update: (id: number, payload: Partial<Omit<PharmacyItem, 'id'>>) => 
    api.put<PharmacyItem>(`/api/v1/pharmacy/${id}`, payload, { headers: { 'Content-Type': 'application/json' } }),
  delete: (id: number) => api.delete<void>(`/api/v1/pharmacy/${id}`),
}

// Pharmacy Order Management Types
export interface PharmacyNeed {
  id: number
  title: string
  notes: string
  status: string
  createdByEmail: string
  createdAt: string
  items: PharmacyNeedItem[]
  invoiceFilePath?: string
  invoiceTotalAmount?: number
}

export interface PharmacyNeedItem {
  id: number
  product: string
  quantity: number
  notes: string
}

export interface CreatePharmacyNeed {
  title: string
  notes: string
  items: CreatePharmacyNeedItem[]
}

export interface CreatePharmacyNeedItem {
  product: string
  quantity: number
  notes: string
}

export interface PharmacyQuote {
  id: number
  supplier: string
  quoteNumber: string
  totalAmount: number
  notes: string
  status: string
  filePath?: string
  relatedNeedId?: number
  createdByEmail: string
  createdAt: string
  items: PharmacyQuoteItem[]
}

export interface PharmacyQuoteItem {
  id: number
  product: string
  quantity: number
  unitPrice: number
  totalPrice: number
  notes: string
}

export interface PharmacyOrder {
  id: number
  orderNumber: string
  supplier: string
  totalAmount: number
  notes: string
  status: string
  filePath?: string
  relatedQuoteId?: number
  relatedNeedId?: number
  createdByEmail: string
  createdAt: string
  items: PharmacyOrderItem[]
}

export interface PharmacyOrderItem {
  id: number
  product: string
  quantity: number
  unitPrice: number
  totalPrice: number
  notes: string
}

export interface PharmacyDelivery {
  id: number
  deliveryNumber: string
  supplier: string
  notes: string
  status: string
  filePath?: string
  relatedOrderId?: number
  createdByEmail: string
  createdAt: string
  items: PharmacyDeliveryItem[]
}

export interface PharmacyDeliveryItem {
  id: number
  product: string
  quantity: number
  conform: boolean
  notes: string
}

// Pharmacy Order Management API
export const pharmacyOrderAPI = {
  // Needs
  getNeeds: (page = 0, size = 10) => api.get<{ content: PharmacyNeed[], totalElements: number }>(`/api/v1/pharmacy-orders/needs?page=${page}&size=${size}`),
  getAllNeeds: () => api.get<PharmacyNeed[]>('/api/v1/pharmacy-orders/needs/all'),
  getNeedById: (id: number) => api.get<PharmacyNeed>(`/api/v1/pharmacy-orders/needs/${id}`),
  createNeed: (data: CreatePharmacyNeed) => api.post<PharmacyNeed>('/api/v1/pharmacy-orders/needs', data),
  updateNeedStatus: (id: number, status: string) => api.put<PharmacyNeed>(`/api/v1/pharmacy-orders/needs/${id}/status?status=${status}`),
  uploadNeedInvoice: (id: number, file: File, totalAmount: number) => {
    const form = new FormData()
    form.append('file', file)
    form.append('totalAmount', String(totalAmount))
    return api.post<PharmacyNeed>(`/api/v1/pharmacy-orders/needs/${id}/invoice`, form)
  },
  downloadNeedInvoice: (id: number) => api.get(`/api/v1/pharmacy-orders/needs/${id}/invoice`, { responseType: 'blob' }),
  deleteNeed: (id: number) => api.delete(`/api/v1/pharmacy-orders/needs/${id}`),

  // Quotes
  getQuotes: (page = 0, size = 10) => api.get<{ content: PharmacyQuote[], totalElements: number }>(`/api/v1/pharmacy-orders/quotes?page=${page}&size=${size}`),
  getQuotesByNeed: (needId: number) => api.get<PharmacyQuote[]>(`/api/v1/pharmacy-orders/quotes/need/${needId}`),
  getQuoteById: (id: number) => api.get<PharmacyQuote>(`/api/v1/pharmacy-orders/quotes/${id}`),
  createQuote: (data: Partial<PharmacyQuote>) => api.post<PharmacyQuote>('/api/v1/pharmacy-orders/quotes', data),
  updateQuoteStatus: (id: number, status: string) => api.put<PharmacyQuote>(`/api/v1/pharmacy-orders/quotes/${id}/status?status=${status}`),

  // Orders
  getOrders: (page = 0, size = 10) => api.get<{ content: PharmacyOrder[], totalElements: number }>(`/api/v1/pharmacy-orders/orders?page=${page}&size=${size}`),
  getOrdersByQuote: (quoteId: number) => api.get<PharmacyOrder[]>(`/api/v1/pharmacy-orders/orders/quote/${quoteId}`),
  getOrderById: (id: number) => api.get<PharmacyOrder>(`/api/v1/pharmacy-orders/orders/${id}`),
  createOrder: (data: Partial<PharmacyOrder>) => api.post<PharmacyOrder>('/api/v1/pharmacy-orders/orders', data),
  updateOrderStatus: (id: number, status: string) => api.put<PharmacyOrder>(`/api/v1/pharmacy-orders/orders/${id}/status?status=${status}`),

  // Deliveries
  getDeliveries: (page = 0, size = 10) => api.get<{ content: PharmacyDelivery[], totalElements: number }>(`/api/v1/pharmacy-orders/deliveries?page=${page}&size=${size}`),
  getDeliveriesByOrder: (orderId: number) => api.get<PharmacyDelivery[]>(`/api/v1/pharmacy-orders/deliveries/order/${orderId}`),
  getDeliveryById: (id: number) => api.get<PharmacyDelivery>(`/api/v1/pharmacy-orders/deliveries/${id}`),
  createDelivery: (data: Partial<PharmacyDelivery>) => api.post<PharmacyDelivery>('/api/v1/pharmacy-orders/deliveries', data),
  updateDeliveryStatus: (id: number, status: string) => api.put<PharmacyDelivery>(`/api/v1/pharmacy-orders/deliveries/${id}/status?status=${status}`),
  updateStockFromDelivery: (id: number) => api.post(`/api/v1/pharmacy-orders/deliveries/${id}/update-stock`)
}