"use client"

import { useState, useEffect } from "react"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { useTheme } from "@/contexts/ThemeContext"
import { useLanguage } from "@/hooks/use-language"
import { Calendar, User, MapPin, Building, Briefcase, CalendarDays, Hash, UserCheck } from "lucide-react"

interface ProfileData {
  id?: string
  username?: string
  email?: string
  dossierNumber?: string
  matriculeNumber?: string // Numéro de matricule (employee number)
  firstName?: string
  lastName?: string
  gender?: string
  birthDate?: string
  address?: string
  company?: string
  hireDate?: string
  profession?: string
  active?: boolean
  roles?: string[]
}

interface ProfileManagementDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  user: ProfileData | null
  onSave: (profileData: ProfileData) => Promise<void>
  accessToken?: string | null
}

export function ProfileManagementDialog({
  open,
  onOpenChange,
  user,
  onSave,
  accessToken
}: ProfileManagementDialogProps) {
  const { themeColors } = useTheme()
  const { language } = useLanguage()
  const [loading, setLoading] = useState(false)
  const [profileData, setProfileData] = useState<ProfileData>({})
  const [isEditing, setIsEditing] = useState(false)

  const text = {
    fr: {
      title: "Gestion du Profil",
      description: "Gérez les informations du profil utilisateur",
      generalInfo: "Informations Générales",
      dossierNumber: "Numéro de dossier",
      matriculeNumber: "Numéro de matricule",
      firstName: "Prénom",
      lastName: "Nom",
      gender: "Sexe",
      birthDate: "Date de naissance",
      address: "Adresse",
      company: "Entreprise",
      hireDate: "Date d'embauche",
      profession: "Profession",
      male: "Homme",
      female: "Femme",
      edit: "Modifier",
      save: "Enregistrer",
      cancel: "Annuler",
      loading: "Chargement...",
      saveSuccess: "Profil mis à jour avec succès",
      saveError: "Erreur lors de la mise à jour du profil",
      autoGenerated: "Généré automatiquement",
      required: "Requis",
      optional: "Optionnel",
      editable: "Modifiable",
    },
    en: {
      title: "Profile Management",
      description: "Manage user profile information",
      generalInfo: "General Information",
      dossierNumber: "File Number",
      matriculeNumber: "Employee Number",
      firstName: "First Name",
      lastName: "Last Name",
      gender: "Gender",
      birthDate: "Birth Date",
      address: "Address",
      company: "Company",
      hireDate: "Hire Date",
      profession: "Profession",
      male: "Male",
      female: "Female",
      edit: "Edit",
      save: "Save",
      cancel: "Cancel",
      loading: "Loading...",
      saveSuccess: "Profile updated successfully",
      saveError: "Error updating profile",
      autoGenerated: "Auto-generated",
      required: "Required",
      optional: "Optional",
      editable: "Editable",
    },
  }

  const t = text[language as keyof typeof text]

  useEffect(() => {
    if (user) {
      setProfileData({
        id: user.id,
        username: user.username,
        email: user.email,
        dossierNumber: user.dossierNumber,
        matriculeNumber: user.matriculeNumber,
        firstName: user.firstName,
        lastName: user.lastName,
        gender: user.gender,
        birthDate: user.birthDate ? user.birthDate.split('T')[0] : '',
        address: user.address,
        company: user.company,
        hireDate: user.hireDate ? user.hireDate.split('T')[0] : '',
        profession: user.profession,
        active: user.active,
        roles: user.roles,
      })
    }
  }, [user])

  const handleSave = async () => {
    try {
      setLoading(true)
      await onSave(profileData)
      setIsEditing(false)
    } catch (error) {
      console.error("Error saving profile:", error)
    } finally {
      setLoading(false)
    }
  }

  const handleCancel = () => {
    setIsEditing(false)
    if (user) {
      setProfileData({
        id: user.id,
        username: user.username,
        email: user.email,
        dossierNumber: user.dossierNumber,
        matriculeNumber: user.matriculeNumber,
        firstName: user.firstName,
        lastName: user.lastName,
        gender: user.gender,
        birthDate: user.birthDate ? user.birthDate.split('T')[0] : '',
        address: user.address,
        company: user.company,
        hireDate: user.hireDate ? user.hireDate.split('T')[0] : '',
        profession: user.profession,
        active: user.active,
        roles: user.roles,
      })
    }
  }

  const getRoleColors = (role: string) => {
    switch (role.toUpperCase()) {
      case 'ADMIN':
        return {
          bg: 'bg-red-500 dark:bg-red-600',
          text: 'text-white dark:text-white font-bold',
          border: 'border-red-600 dark:border-red-700',
          size: 'text-sm px-3 py-1'
        }
      case 'SALARIE':
        return {
          bg: 'bg-teal-100 dark:bg-teal-900/20',
          text: 'text-teal-800 dark:text-teal-400',
          border: 'border-teal-200 dark:border-teal-800/30',
          size: 'text-xs'
        }
      case 'INFIRMIER_ST':
        return {
            bg: 'bg-emerald-100 dark:bg-emerald-900/20',
  text: 'text-emerald-800 dark:text-emerald-400',
  border: 'border-emerald-200 dark:border-emerald-800/30',
          size: 'text-xs'
        }
      case 'MEDECIN_TRAVAIL':
        return {
          bg: 'bg-blue-100 dark:bg-blue-900/20',
          text: 'text-blue-800 dark:text-blue-400',
          border: 'border-blue-200 dark:border-blue-800/30',
          size: 'text-xs'
        }
      case 'RESP_HSE':
        return {
          bg: 'bg-orange-100 dark:bg-orange-900/20',
          text: 'text-orange-800 dark:text-orange-400',
          border: 'border-orange-200 dark:border-orange-800/30',
          size: 'text-xs'
        }
      case 'RH':
        return {
          bg: 'bg-purple-100 dark:bg-purple-900/20',
          text: 'text-purple-800 dark:text-purple-400',
          border: 'border-purple-200 dark:border-purple-800/30',
          size: 'text-xs'
        }
      default:
        return {
          bg: 'bg-slate-100 dark:bg-slate-700',
          text: 'text-slate-700 dark:text-slate-300',
          border: 'border-slate-200 dark:border-slate-600/30',
          size: 'text-xs'
        }
    }
  }

  if (!user) return null

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="bg-white/95 dark:bg-slate-900/95 backdrop-blur-xl border border-slate-200/60 dark:border-slate-700/60 max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-slate-900 dark:text-white text-2xl font-bold flex items-center gap-3">
            <User className="h-6 w-6" style={{ color: themeColors.colors.primary[600] }} />
            {t.title}
          </DialogTitle>
          <DialogDescription className="text-slate-600 dark:text-slate-400">
            {t.description}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* User Info Header */}
          <Card className="bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 border-slate-200/60 dark:border-slate-700/60">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center shadow-lg">
                    <span className="text-xl font-bold text-white">
                      {user.firstName?.[0] || user.username?.[0]}
                    </span>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-slate-900 dark:text-white">
                      {user.firstName} {user.lastName}
                    </h3>
                    <p className="text-slate-600 dark:text-slate-400">@{user.username}</p>
                    <p className="text-slate-500 dark:text-slate-500">{user.email}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  {user.roles?.map((role) => {
                    const { bg, text, border, size } = getRoleColors(role)
                    return (
                      <Badge key={role} className={`${bg} ${text} ${border} ${size}`}>
                        {role}
                      </Badge>
                    )
                  })}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Profile Information */}
          <Card className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60">
            <CardHeader>
              <CardTitle className="text-slate-900 dark:text-white flex items-center gap-2">
                <UserCheck className="h-5 w-5" style={{ color: themeColors.colors.primary[600] }} />
                {t.generalInfo}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Dossier Number */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="dossierNumber" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    <Hash className="h-4 w-4" />
                    {t.dossierNumber}
                    <Badge variant="outline" className="text-xs">
                      {t.autoGenerated}
                    </Badge>
                  </Label>
                  <Input
                    id="dossierNumber"
                    value={profileData.dossierNumber || ''}
                    disabled
                    className="bg-slate-50 dark:bg-slate-700 border-slate-200 dark:border-slate-600 text-slate-500 dark:text-slate-400"
                  />
                </div>
                <div>
                  <Label htmlFor="matriculeNumber" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    <Hash className="h-4 w-4" />
                    {t.matriculeNumber}
                    <Badge variant="outline" className="text-xs">
                      {t.editable}
                    </Badge>
                  </Label>
                  <Input
                    id="matriculeNumber"
                    value={profileData.matriculeNumber || ''}
                    onChange={(e) => setProfileData({ ...profileData, matriculeNumber: e.target.value })}
                    disabled={!isEditing}
                    className={isEditing 
                      ? "bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                      : "bg-slate-50 dark:bg-slate-700 border-slate-200 dark:border-slate-600 text-slate-500 dark:text-slate-400"
                    }
                    placeholder="Ex: MAT-1234567890"
                  />
                </div>
              </div>

              {/* Name Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="firstName" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    {t.firstName}
                    <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                      {t.required}
                    </Badge>
                  </Label>
                  <Input
                    id="firstName"
                    value={profileData.firstName || ''}
                    onChange={(e) => setProfileData({ ...profileData, firstName: e.target.value })}
                    disabled={!isEditing}
                    className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                  />
                </div>
                <div>
                  <Label htmlFor="lastName" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    {t.lastName}
                    <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                      {t.required}
                    </Badge>
                  </Label>
                  <Input
                    id="lastName"
                    value={profileData.lastName || ''}
                    onChange={(e) => setProfileData({ ...profileData, lastName: e.target.value })}
                    disabled={!isEditing}
                    className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                  />
                </div>
              </div>

              {/* Gender and Birth Date */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="gender" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    {t.gender}
                    <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                      {t.required}
                    </Badge>
                  </Label>
                  <Select
                    value={profileData.gender || ''}
                    onValueChange={(value) => setProfileData({ ...profileData, gender: value })}
                    disabled={!isEditing}
                  >
                    <SelectTrigger className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white">
                      <SelectValue placeholder={t.gender} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Homme">{t.male}</SelectItem>
                      <SelectItem value="Femme">{t.female}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="birthDate" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    {t.birthDate}
                    <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                      {t.required}
                    </Badge>
                  </Label>
                  <Input
                    id="birthDate"
                    type="date"
                    value={profileData.birthDate || ''}
                    onChange={(e) => setProfileData({ ...profileData, birthDate: e.target.value })}
                    disabled={!isEditing}
                    className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                  />
                </div>
              </div>

              {/* Address */}
              <div>
                <Label htmlFor="address" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                  <MapPin className="h-4 w-4" />
                  {t.address}
                  <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                    {t.required}
                  </Badge>
                </Label>
                <Input
                  id="address"
                  value={profileData.address || ''}
                  onChange={(e) => setProfileData({ ...profileData, address: e.target.value })}
                  disabled={!isEditing}
                  placeholder="Domicile du patient"
                  className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                />
              </div>

              {/* Company and Hire Date */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="company" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    <Building className="h-4 w-4" />
                    {t.company}
                    <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                      {t.required}
                    </Badge>
                  </Label>
                  <Input
                    id="company"
                    value={profileData.company || ''}
                    onChange={(e) => setProfileData({ ...profileData, company: e.target.value })}
                    disabled={!isEditing}
                    placeholder="Nom de l'entreprise"
                    className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                  />
                </div>
                <div>
                  <Label htmlFor="hireDate" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                    <CalendarDays className="h-4 w-4" />
                    {t.hireDate}
                    <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                      {t.required}
                    </Badge>
                  </Label>
                  <Input
                    id="hireDate"
                    type="date"
                    value={profileData.hireDate || ''}
                    onChange={(e) => setProfileData({ ...profileData, hireDate: e.target.value })}
                    disabled={!isEditing}
                    className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                  />
                </div>
              </div>

              {/* Profession */}
              <div>
                <Label htmlFor="profession" className="text-slate-700 dark:text-slate-300 flex items-center gap-2">
                  <Briefcase className="h-4 w-4" />
                  {t.profession}
                  <Badge variant="outline" className="text-xs bg-red-50 text-red-700 border-red-200">
                    {t.required}
                  </Badge>
                </Label>
                <Input
                  id="profession"
                  value={profileData.profession || ''}
                  onChange={(e) => setProfileData({ ...profileData, profession: e.target.value })}
                  disabled={!isEditing}
                  placeholder="Poste occupé"
                  className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-900 dark:text-white"
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end gap-3 pt-6 border-t border-slate-200/60 dark:border-slate-700/60">
          {!isEditing ? (
            <>
              <Button
                variant="outline"
                onClick={() => onOpenChange(false)}
                className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-300"
              >
                {t.cancel}
              </Button>
              <Button
                onClick={() => setIsEditing(true)}
                className="shadow-lg hover:shadow-xl transition-all duration-300"
                style={{
                  background: `linear-gradient(135deg, ${themeColors.colors.primary[600]}, ${themeColors.colors.primary[700]})`,
                }}
              >
                {t.edit}
              </Button>
            </>
          ) : (
            <>
              <Button
                variant="outline"
                onClick={handleCancel}
                disabled={loading}
                className="bg-white/80 dark:bg-slate-800/80 border-slate-200/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-300"
              >
                {t.cancel}
              </Button>
              <Button
                onClick={handleSave}
                disabled={loading}
                className="shadow-lg hover:shadow-xl transition-all duration-300"
                style={{
                  background: `linear-gradient(135deg, ${themeColors.colors.primary[600]}, ${themeColors.colors.primary[700]})`,
                }}
              >
                {loading ? t.loading : t.save}
              </Button>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
} 